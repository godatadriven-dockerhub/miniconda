name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 0 * * 2'

env:
  DOCKER_REPO: godatadriven/miniconda

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Array where every entry is a single miniconda docker image 
        # represented by a string with comma seperated tags:
        # ["MINICONDA_RELEASE-PYTHON_VERSION,TAG_2, TAG_3, ....", ]
        DOCKER_TAG: ["latest-2.7,2,2.7", "latest-3.7,3.7", "latest-3.8,3.8", "latest-3.9,3.9", "latest-3.10,3.10,latest"]
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
            DOCKER_TAG="${{ matrix.DOCKER_TAG }}"
            
            IMAGE_TAG=${DOCKER_TAG%%,*}
            PYTHON_VERSION=${IMAGE_TAG#*-}
            MINICONDA_VERSION=${PYTHON_VERSION:0:1}
            MINICONDA_RELEASE=${IMAGE_TAG%-*}

            echo ::set-output name=miniconda_version::${MINICONDA_VERSION}
            echo ::set-output name=miniconda_release::${MINICONDA_RELEASE}
            echo ::set-output name=python_version::${PYTHON_VERSION}

            DOCKER_IMAGE_NAME="$DOCKER_REPO:$IMAGE_TAG"
            echo ::set-output name=image_name::${DOCKER_IMAGE_NAME}
            
            TAGS="$DOCKER_REPO:${DOCKER_TAG//,/,$DOCKER_REPO:}"
            echo ::set-output name=tags::${TAGS}

            echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Build image
        uses: docker/build-push-action@v2
        with:
         context: .
         file: ./Dockerfile
         push: false
         tags: ${{ steps.prep.outputs.tags }}
         build-args: |
           MINICONDA_VERSION=${{ steps.prep.outputs.miniconda_version }}
           MINICONDA_RELEASE=${{ steps.prep.outputs.miniconda_release }}
           PYTHON_VERSION=${{ steps.prep.outputs.python_version }}
         labels: |
           org.opencontainers.image.source=${{ github.event.repository.clone_url }}
           org.opencontainers.image.created=${{ steps.prep.outputs.created }}
           org.opencontainers.image.revision=${{ github.sha }}

      - name: Test image
        env:
            IMAGE_NAME: ${{ steps.prep.outputs.image_name }}
        run: |
            if [[ -f "docker-compose.test.yml" ]]; then
                docker-compose --file docker-compose.test.yml build
                docker-compose --file docker-compose.test.yml run sut
            fi

      - name: Login to DockerHub
        if: github.ref == 'refs/heads/master'
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB }}

      - name: Push image
        if: github.ref == 'refs/heads/master'
        run: |
            docker push --all-tags $DOCKER_REPO

      - name: Report Status
        if: always() && github.ref == 'refs/heads/master'
        uses: ravsamhq/notify-slack-action@master
        with:
          status: ${{ job.status }}
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_GDD_GENERAL_WEBHOOK }}
